import Head from "next/head";
import { useState, useEffect } from "react";
import axios from "axios";
import { dbConnect } from "../utils/db";
import getCoinbaseAccounts from "../utils/coinbaseConnect";
import {} from "events";

export async function getStaticProps() {
  const accounts = await getCoinbaseAccounts();
  return { props: { accounts } };
}

//This function gets the current value of all coinbase accounts for the profile (in this case, it's a sandbox generic user)
async function fetchAccounts() {
  try {
    const response = await axios.get("http://127.0.0.1:3000/api/accounts");
    return response.data;
  } catch (error) {
    console.error(error);
  }
}

export default function Home({ accounts }) {
  //useStates for account data
  const [data, setData] = useState(accounts);
  //useStates for page refresh loading to disable the refresh accounts button for a period of time.
  const [isLoading, setIsLoading] = useState(false);
  //The next few states are here to allow the user to setup their own bespoke order on the platform. This section is incomplete.
  const [positionPrice, setPositionPrice] = useState(0);
  const [costPerTrade, setCostPerTrade] = useState(0);
  const [profitTarget, setProfitTarget] = useState(0);
  const [lossLimit, setLossLimit] = useState(0);
  const [longLimitSellPrice, setLongLimitSellPrice] = useState(0);
  const [shortLimitBuyPrice, setShortLimitBuyPrice] = useState(0);
  const [shortLossPrice, setShortLossPrice] = useState(0);
  const [longLossPrice, setLongLossPrice] = useState(0);
  const [quantity, setQuantity] = useState(0);
  const [symbol, setSymbol] = useState(0);
  //This is the message data coming from TradingView via my tvPlaceTrade API endpoint.
  const [message, setMessage] = useState("");

  //I am not sure I'm going to ever use this, but I was thinking about how I'd use it to package all the state variables when it's time to transmit them to Coinbase.
  let pricingDataPkg = {
    longLimitSellPrice: longLimitSellPrice,
    shortLimitBuyPrice: shortLimitBuyPrice,
    longLossPrice: longLossPrice,
    shortLossPrice: shortLossPrice,
    limitBuySellPrice: positionPrice,
    quantity: quantity,
    symbol: symbol,
  };

  //Gather the incoming Messages from TradingView via the tvPlaceTrade api endpoint
  useEffect(() => {
    const eventSource = new EventSource("api/tvPlaceTrade");
    eventSource.addEventListener("message", (event) => {
      setMessage(event.data);
      console.log("message was updated");
      console.log(event.data);
    });
    return () => {
      eventSource.close();
    };
  }, [message]);
  //validate 'message' was updated with the POST data that comes into the tvPlaceTrade api endpoint
  console.log("Also logging message here");
  console.log(message);

  //I don't actually know what this is doing?
  useEffect(() => {
    handleRecalculation(positionPrice, costPerTrade, profitTarget, lossLimit);
  }, [positionPrice, costPerTrade, profitTarget, lossLimit]);

  //These are all the handling of state change for various fields. When each field is edited, I need to recalculate all the values in pricingDataPkg.
  const handleLongPriceChange = (e) => {
    handleRecalculation(positionPrice, costPerTrade, profitTarget, lossLimit);
    setPositionPrice(parseFloat(e.target.value));
  };
  const handleLongProfitTargetChange = (e) => {
    handleRecalculation(positionPrice, costPerTrade, profitTarget, lossLimit);
    setProfitTarget(parseFloat(e.target.value));
  };
  const handleCostPerTradeChange = (e) => {
    handleRecalculation(positionPrice, costPerTrade, profitTarget, lossLimit);
    setCostPerTrade(parseFloat(e.target.value));
  };
  const handleLossLimitChange = (e) => {
    handleRecalculation(positionPrice, costPerTrade, profitTarget, lossLimit);
    setLossLimit(parseFloat(e.target.value));
  };

  //Using this function to shorthand the code a little bit, allowing me to move the larger code body outside the Home component.
  function handleRecalculation(
    positionPrice,
    costPerTrade,
    profitTarget,
    lossLimit
  ) {
    let result = recalculateLimitPrices(
      positionPrice,
      costPerTrade,
      profitTarget,
      lossLimit
    );
    setLongLimitSellPrice(result.longLimit);
    setShortLimitBuyPrice(result.shortLimit);
    setLongLossPrice(result.longLoss);
    setShortLossPrice(result.shortLoss);
  }

  //The function that refreshes the account data if the user clicks the button to do it.
  async function handleRefreshAccounts() {
    setIsLoading(true);
    const response = await fetchAccounts();
    // setTimeout(() => {
    if (response) {
      setData(response.data);
    } else {
      console.log("No Data received");
    }
    setIsLoading(false);
    // }, 250)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <button
          id="refreshAccounts"
          onClick={handleRefreshAccounts}
          disabled={isLoading}
        >
          Refresh Accounts
        </button>
        <p>Accounts with zero balance are hidden</p>
        <div>
          {data.map((account) => {
            const hidden = account.balance > 0;
            return (
              <div key={account.id} hidden={!hidden}>
                <h2>{account.currency}</h2>
                <p>Balance: {account.balance}</p>
                <p>Hold: {account.hold}</p>
                <p>Available: {account.available}</p>
              </div>
            );
          })}
        </div>
        <div className="row">
          <div>
            <h2>Form</h2>
            <table>
              <tr>
                <td></td>
                <td>Position Price:</td>
                <td>
                  <input
                    id="positionPrice"
                    type="number"
                    value={positionPrice}
                    onChange={handleLongPriceChange}
                  />
                </td>

                <td></td>
              </tr>
              <tr>
                <td></td>
                <td>1-Way Cost Per Trade (%):</td>
                <td>
                  <input
                    id="costPerTrade"
                    type="number"
                    value={costPerTrade}
                    onChange={handleCostPerTradeChange}
                  />
                </td>
              </tr>
              <tr>
                <td></td>
                <td>Profit Target (%):</td>{" "}
                <td>
                  <input
                    id="longProfitTarget"
                    type="number"
                    value={profitTarget}
                    onChange={handleLongProfitTargetChange}
                  />
                </td>
                <td></td>
              </tr>
              <tr>
                <td></td>
                <td>Limit Loss Target (%):</td>{" "}
                <td>
                  <input
                    id="lossLimit"
                    type="number"
                    value={lossLimit}
                    onChange={handleLossLimitChange}
                  />
                </td>
                <td></td>
              </tr>
            </table>
            <table>
              <tr>
                <td colSpan={5} />
                <p></p>
              </tr>
              <tr>
                <td>Long Limit Sell Price: {longLimitSellPrice}</td>
                <td></td>
                <td></td>
                <td>Short Limit Buy Price: {shortLimitBuyPrice}</td>
              </tr>
              <tr>
                <td>Long Stop Limit Price: {longLossPrice}</td>
                <td></td>
                <td></td>
                <td>Short Stop Limit Price: {shortLossPrice}</td>
              </tr>
            </table>
            <hr></hr>
            <div>
              <table>
                <tr>
                  <td colSpan={2}>{message.alertName}</td>
                </tr>
                <tr>
                  <td>Symbol</td>
                  <td>{message.symbol}</td>
                </tr>
                <tr>
                  <td>Action:</td>
                  <td>{message.action}</td>
                </tr>
                <tr>
                  <td>Position Price:</td>
                  <td>{message.positionPrice}</td>
                </tr>
                <tr>
                  <td>Quantity:</td>
                  <td>{message.quantity}</td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <hr></hr>
        <div style={{ paddingTop: 10 }}>
          <ul>
            Things to do:
            <li>Verify Calcs</li>
            <li>Setup Trading Pair Selections</li>
            <li>Add Buttons for Trading</li>
            <li>
              Setup Webhook endpoint for TradingView
              (https://www.tradingview.com/support/solutions/43000529348-about-webhooks/)
              (localhost:3000/api/tvPlaceTrade)
              <p>{message}</p>
            </li>
          </ul>
        </div>
      </main>
    </>
  );
}

function recalculateLimitPrices(
  positionPrice,
  costPerTrade,
  profitTarget,
  lossLimit
) {
  if (costPerTrade) {
    costPerTrade = costPerTrade / 100;
  }
  if (profitTarget) {
    profitTarget = profitTarget / 100;
  }
  if (lossLimit) {
    lossLimit = lossLimit / 100;
  }
  let longBaseTradeCost = positionPrice * (1 + costPerTrade);
  let shortBaseTradeCost = positionPrice * (1 - costPerTrade);
  let longBuyCost = 0;
  let shortSellCost = 0;
  longBuyCost = longBaseTradeCost * (1 + profitTarget);
  shortSellCost = shortBaseTradeCost * (1 - profitTarget);
  let longProfitableAmt = longBuyCost / (1 - costPerTrade);
  let shortProfitableAmt = shortSellCost * (1 - costPerTrade);
  let longLoss = positionPrice * (1 - lossLimit);
  let shortLoss = positionPrice * (1 + lossLimit);
  return {
    longLimit: longProfitableAmt,
    shortLimit: shortProfitableAmt,
    longLoss: longLoss,
    shortLoss: shortLoss,
  };
}
